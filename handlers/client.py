from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup
from dispatcher import bot, dp
from keyboard.client_kb import inline_menu, choose_bank_btn, back_btn
from keyboard.client_kb import exchange_btn, currency_btn, approve_btn
from keyboard.admin_kb import gen_inline_main_menu
from handlers.admin import ID
from database import sqlite_db
import math
from datetime import datetime


# @dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    photo = open("/root/TG_BOT_2.0/photo/logo3.png", 'rb')
    await bot.send_photo(message.from_user.id, photo, caption='üëã–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢—É—Ä –û–±–º–µ–Ω - –≤–∞–ª—é—Ç–Ω–æ –æ–±–º–µ–Ω–Ω—ã–π —á–∞—Ç-–±–æ—Ç. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–∏—Ö –æ–±–º–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞—Ö –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –æ–±–º–µ–Ω—É –≤–∞–ª—é—Ç—ã. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å. –ù–∞—á–Ω–µ–º! /menu')


# @dp.message_handler(commands=['menu'], state="*")
async def menu(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:  
        await state.finish()
    
    if message.from_user.id == ID:
        await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫', reply_markup=gen_inline_main_menu())
    else:
        await message.answer('–ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?', reply_markup=inline_menu)


# @dp.callback_query_handler(text=['menu'])
async def menu_2(callback: types.CallbackQuery):
    await callback.message.delete()
    
    await callback.message.answer('–ß–µ–º —è –º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?', reply_markup=inline_menu)

# @dp.message_handler(commands=['consultant'], state="*")
async def consultant(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:  
        await state.finish()
    await message.delete()
    await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∏ –ø—Ä–∏–Ω—è—Ç–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', reply_markup=back_btn)
    check_user = await sqlite_db.one_consultant(message.from_user.id)
    print(check_user)
    if check_user[0] == message.from_user.id:
        print(check_user)
    else:
        await sqlite_db.add_consultant(message.from_user.id)
        print(check_user)
    

# @dp.callback_query_handler(text=['consultant'])
async def consultant_2(callback: types.CallbackQuery):
    await callback.message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∏ –ø—Ä–∏–Ω—è—Ç–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', reply_markup=back_btn)
    await callback.message.delete()
    await sqlite_db.add_consultant(callback.from_user.id)
    

# @dp.callback_query_handler(text=['how_it_works'])
async def how_it_works(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('üîπ –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å.\n\n'
                                  'üîπ –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É: –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–±–º–µ–Ω–∞. \n\n'
                                  'üîπ –ü–æ–ª—É—á–∏—Ç–µ –≤—ã–≥–æ–¥–Ω—ã–π –∫—É—Ä—Å: –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –í–∞–º –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫—É—Ä—Å –æ–±–º–µ–Ω–∞. \n\n'
                                  'üîπ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é: –§–∏–∫—Å–∏—Ä—É–µ–º –∫—É—Ä—Å, –æ–¥–æ–±—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –æ–±–º–µ–Ω–∞ –∏ –≤–Ω–µ—Å–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. \n\n'
                                  'üîπ –ü–æ–ª—É—á–∏—Ç–µ –≤—Ç–æ—Ä—É—é –≤–∞–ª—é—Ç—É: –ù–∞—à –∫—É—Ä—å–µ—Ä –¥–æ—Å—Ç–∞–≤–∏—Ç VND (–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π –¥–æ–Ω–≥), –ø–æ—Å–ª–µ —á–µ–≥–æ –í—ã –ø–µ—Ä–µ–≤–µ–¥–µ—Ç–µ —Å–≤–æ—é –≤–∞–ª—é—Ç—É –ø–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∫—É—Ä—Å—É.'
                                  'üîπ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 09:00 –¥–æ 18:00', reply_markup=back_btn)

# @dp.callback_query_handler(text=['advantages'])
async def advantages(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('üîπ –û–±—à–∏—Ä–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫ –æ–Ω–ª–∞–π–Ω –æ–±–º–µ–Ω—É: RUB (–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å), KZT (–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ), KGS (–ö—ã—Ä–≥—ã–∑—Å–∫–∏–π —Å–æ–º), UZS (–£–∑–±–µ–∫—Å–∫–∏–π —Å—É–º), USDT (Tether)\n\n' 
                                  'üîπ –õ—É—á—à–∏–µ –∫—É—Ä—Å—ã: –ø–æ–ª—É—á–∏—Ç–µ —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –∫—É—Ä—Å—ã –Ω–∞ —Ä—ã–Ω–∫–µ. \n\n'
                                  'üîπ –ë—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ: –°–æ–≤–µ—Ä—à–∞–π—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–º–µ–Ω–∞ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤. –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ VND (–í—å–µ—Ç–Ω–∞–º—Å–∫–∏–π –¥–æ–Ω–≥) –¥–æ –¥–≤–µ—Ä–∏. \n\n'
                                  'üîπ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏.', reply_markup=back_btn)



# __________________–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä__________________________

class FSMCalculator(StatesGroup):
    currency = State()
    amount = State()


# @dp.callback_query_handler(text=['calculator'], state=None)
async def calculator(callback: types.CallbackQuery):
    await FSMCalculator.currency.set()
    await callback.message.delete()
    await callback.message.answer('–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?', reply_markup=currency_btn)
    
# @dp.callback_query_handler(state=FSMCalculator.currency)
async def load_currency(callback: types.CallbackQuery, state=FSMContext):
     async with state.proxy() as data:
         data['currency'] = callback.data
     await FSMCalculator.next()
     await callback.message.delete()
     await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')


# @dp.message_handler(state=FSMExchange.amount)
async def load_amount(message: types.Message, state=FSMContext):
    try:
        amount = message.text
        async with state.proxy() as data:
            data['amount'] = amount
            
            rate = sqlite_db.check_currency(data['currency'])
            sum = rate * int(amount)
            
            data['vnd_amount'] = math.floor(sum)
            
        await message.delete()
        await message.answer(f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ {"{0:,}".format(int(math.floor(sum))).replace(",", " ")} VND', reply_markup=back_btn)
        await state.finish()
        

    except ValueError:
        await FSMCalculator.amount.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–∞–º–∏:')

# __________________–û–±–º–µ–Ω –¥–µ–Ω–µ–≥ _________________________


class FSMExchange(StatesGroup):
    currency = State()
    bank = State()
    amount = State()
    aprove = State()
    

# @dp.callback_query_handler(text=['exchange'], state=None)
async def exchange_start(callback: types.CallbackQuery):
     await FSMExchange.currency.set()
     await callback.message.delete()
     await callback.message.answer('–ö–∞–∫—É—é –≤–∞–ª—é—Ç—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å?', reply_markup=currency_btn)


# @dp.callback_query_handler(state=FSMExchange.currency)
async def currency_load(callback: types.CallbackQuery, state=FSMContext):
     async with state.proxy() as data:
         data['user_id'] = callback.from_user.id
         data['currency'] = callback.data
     await FSMExchange.next()
     await callback.message.delete()

     if data['currency'] == 'usdt':
        async with state.proxy() as data:
            data['bank'] = 'none'
        await FSMExchange.next()
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')

     else:
        await callback.message.answer('–ö–∞–∫–æ–π –±–∞–Ω–∫?', reply_markup=choose_bank_btn(data['currency']))


# @dp.callback_query_handler(state=FSMExchange.city)
async def bank_load(callback: types.CallbackQuery, state=FSMContext):
     async with state.proxy() as data:
         data['bank'] = callback.data
     await FSMExchange.next()
     await callback.message.delete()
     
     await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
     

# @dp.message_handler(state=FSMExchange.amount)
async def amount_load(message: types.Message, state=FSMContext):
    try:
        amount = message.text
        async with state.proxy() as data:
            data['amount'] = amount
            rate = sqlite_db.check_currency(data['currency'])
            sum = rate * int(amount)
            data['vnd_amount'] = math.floor(sum)
            
        await FSMExchange.next()
        await message.delete()
        await message.answer(f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ {"{0:,}".format(int(math.floor(sum))).replace(",", " ")} VND', reply_markup=approve_btn)
    except ValueError:
        await FSMExchange.amount.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–∞–º–∏:')
        


# @dp.callback_query_handler(state=FSMExchange.approve)
async def approve_exchange(callback: types.CallbackQuery, state=FSMContext):
    if callback.data == 'aprove':
        async with state.proxy() as data:
            data['aprove'] = 'yes'
            data['time'] = datetime.now()
            amount = int(data['amount'])
            
            currency = data['currency']
            vnd_amount = data['vnd_amount']
        await sqlite_db.add_exchange(state)
        await state.finish()
        await callback.message.delete()
        await callback.message.answer(f'–û–±–º–µ–Ω {"{0:,}".format(amount).replace(",", " ")} {currency} –Ω–∞ {"{0:,}".format(vnd_amount).replace(",", " ")} VND\n –°–ø–∞—Å–∏–±–æ, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', reply_markup=back_btn)
        

    else:
        await state.finish()
        await callback.message.delete()
        await menu_2(callback)

# __________________–û—Ç–∑—ã–≤—ã _________________________

class FSMReview(StatesGroup):
    review = State()
    
# @dp.callback_query_handler(text=['review'], state=None)
async def review_start(callback: types.CallbackQuery):
     await FSMReview.review.set()
     await callback.message.delete()
     await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:')


# @dp.message_handler(state=FSMReview.review)
async def review_load(message: types.Message, state=FSMContext):
    await bot.forward_message(-1001834865804, message.from_user.id, message.message_id)
    await state.finish()
    await message.answer('–°–ø–∞—Å–∏–±–æ, –∑–∞ –æ—Ç–∑—ã–≤')

# __________________–ö—É—Ä—Å –í–∞–ª—é—Ç _________________________


# @dp.callback_query_handler(text=['course'])
async def course(callback: types.CallbackQuery):
    await callback.message.delete()
    usdt = int(sqlite_db.check_currency('usdt') * 100)
    rub = int(sqlite_db.check_currency('rub') * 10000)
    kzt = int(sqlite_db.check_currency('kzt') * 50000)
    kgs = int(sqlite_db.check_currency('kgs') * 10000)
    uzs = int(sqlite_db.check_currency('uzs') * 1000000)

    await callback.message.answer(f'üá∫üá∏ 100 USDT = {"{0:,}".format(usdt).replace(",", " ")} VND\nüá∑üá∫ 10 000 RUB = {"{0:,}".format(rub).replace(",", " ")} VND\n'
                         f'üá∞üáø 50 000 KZT = {"{0:,}".format(kzt).replace(",", " ")} VND\nüá∞üá¨ 10 000 KGS = {"{0:,}".format(kgs).replace(",", " ")} VND\n'
                         f'üá∫üáø 1 000 000 UZS = {"{0:,}".format(uzs).replace(",", " ")} VND', reply_markup=back_btn)


# __________________–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ _________________________

def register_client_handler(dp: Dispatcher):
    dp.register_message_handler(start_message, commands=['start'])
    dp.register_message_handler(menu, commands=['menu'], state="*")
    dp.register_callback_query_handler(menu_2, text=['main_menu'])

    dp.register_message_handler(consultant, commands=['consultant'], state="*")
    dp.register_callback_query_handler(consultant_2, text=['consultant'])

    dp.register_callback_query_handler(advantages, text=['advantages'])
    dp.register_callback_query_handler(how_it_works, text=['how_it_works'])

    dp.register_callback_query_handler(calculator, text=['calculator'], state=None)
    dp.register_callback_query_handler(load_currency, state=FSMCalculator.currency)
    dp.register_message_handler(load_amount, state=FSMCalculator.amount)
    
    dp.register_callback_query_handler(exchange_start, text=['exchange'], state=None)
    dp.register_callback_query_handler(currency_load, state=FSMExchange.currency)
    dp.register_callback_query_handler(bank_load, state=FSMExchange.bank)
    dp.register_message_handler(amount_load, state=FSMExchange.amount)
    dp.register_callback_query_handler(approve_exchange, state=FSMExchange.aprove)
    
    dp.register_callback_query_handler(review_start, text=['review'], state=None)
    dp.register_message_handler(review_load, state=FSMReview.review)

    dp.register_callback_query_handler(course, text=['course'])